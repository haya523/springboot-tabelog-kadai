package com.example.samuraitravel.service;

import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.samuraitravel.entity.House;
import com.example.samuraitravel.entity.Review;
import com.example.samuraitravel.entity.User;
import com.example.samuraitravel.form.ReviewForm;
import com.example.samuraitravel.repository.HouseRepository;
import com.example.samuraitravel.repository.ReviewRepository;
import com.example.samuraitravel.repository.UserRepository;

@Service
public class ReviewService {

    private final ReviewRepository reviewRepository;
    private final HouseRepository houseRepository;
    private final UserRepository userRepository;

    public ReviewService(ReviewRepository reviewRepository,
                         HouseRepository houseRepository,
                         UserRepository userRepository) {
        this.reviewRepository = reviewRepository;
        this.houseRepository = houseRepository;
        this.userRepository = userRepository;
    }

    // 一覧（新しい順）
    public Page<Review> getReviewsForHouse(Integer houseId, int page, int size) {
        return reviewRepository.findByHouseIdOrderByCreatedAtDesc(houseId, PageRequest.of(page, size));
    }

    // 自分のレビュー（最新1件）
    public Optional<Review> getUserReviewForHouse(Integer houseId, Integer userId) {
        return reviewRepository.findFirstByHouseIdAndUserIdOrderByCreatedAtDesc(houseId, userId);
    }

    // ★作成（同じ宿×ユーザーに既存があれば更新扱いにする or 例外にする）
    @Transactional
    public Review create(Integer houseId, Integer userId, ReviewForm form) {
        House house = houseRepository.findById(houseId)
                .orElseThrow(() -> new IllegalArgumentException("house not found: " + houseId));
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("user not found: " + userId));

        // 1宿1レビューにしたい場合：既存があれば上書き（編集）にする
        Optional<Review> existing = reviewRepository
                .findFirstByHouseIdAndUserIdOrderByCreatedAtDesc(houseId, userId);

        Review r = existing.orElseGet(Review::new);
        r.setHouse(house);
        r.setUser(user);
        r.setRating(form.getRating());     // form フィールド名に合わせて
        r.setComment(form.getComment());   // ここも合わせて
        // createdAt / updatedAt は @PrePersist/@PreUpdate で自動なら不要

        return reviewRepository.save(r);
    }
}
