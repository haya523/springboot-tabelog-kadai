package com.example.samuraitravel.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

// ★ 追加 import
import org.springframework.security.core.annotation.AuthenticationPrincipal;

import com.example.samuraitravel.entity.House;
import com.example.samuraitravel.entity.Review;              // ★ 追加
import com.example.samuraitravel.form.ReservationInputForm;
import com.example.samuraitravel.repository.HouseRepository;
import com.example.samuraitravel.security.UserDetailsImpl;  // ★ 追加
import com.example.samuraitravel.service.ReviewService;     // ★ 追加

@Controller
@RequestMapping("/houses")
public class HouseController {
    private final HouseRepository houseRepository;
    private final ReviewService reviewService; // ★ 追加

    // ★ ReviewService をコンストラクタに追加
    public HouseController(HouseRepository houseRepository, ReviewService reviewService) {
        this.houseRepository = houseRepository;
        this.reviewService = reviewService;
    }

    @GetMapping
    public String index(@RequestParam(required = false) String keyword,
                        @RequestParam(required = false) String area,
                        @RequestParam(required = false) Integer price,
                        @RequestParam(required = false) String order,
                        @PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC) Pageable pageable,
                        Model model) {
        Page<House> housePage;

        if (keyword != null && !keyword.isEmpty()) {
            if (order != null && order.equals("priceAsc")) {
                housePage = houseRepository.findByNameLikeOrAddressLikeOrderByPriceAsc("%" + keyword + "%", "%" + keyword + "%", pageable);
            } else {
                housePage = houseRepository.findByNameLikeOrAddressLikeOrderByCreatedAtDesc("%" + keyword + "%", "%" + keyword + "%", pageable);
            }
        } else if (area != null && !area.isEmpty()) {
            if (order != null && order.equals("priceAsc")) {
                housePage = houseRepository.findByAddressLikeOrderByPriceAsc("%" + area + "%", pageable);
            } else {
                housePage = houseRepository.findByAddressLikeOrderByCreatedAtDesc("%" + area + "%", pageable);
            }
        } else if (price != null) {
            if (order != null && order.equals("priceAsc")) {
                housePage = houseRepository.findByPriceLessThanEqualOrderByPriceAsc(price, pageable);
            } else {
                housePage = houseRepository.findByPriceLessThanEqualOrderByCreatedAtDesc(price, pageable);
            }
        } else {
            if (order != null && order.equals("priceAsc")) {
                housePage = houseRepository.findAllByOrderByPriceAsc(pageable);
            } else {
                housePage = houseRepository.findAllByOrderByCreatedAtDesc(pageable);
            }
        }

        model.addAttribute("housePage", housePage);
        model.addAttribute("keyword", keyword);
        model.addAttribute("area", area);
        model.addAttribute("price", price);
        model.addAttribute("order", order);

        return "houses/index";
    }

    @GetMapping("/{id}")
    public String show(@PathVariable Integer id,
                       Model model,
                       // ★ ログインユーザーを受け取る（未ログインなら null）
                       @AuthenticationPrincipal UserDetailsImpl login) {
        House house = houseRepository.getReferenceById(id);

        model.addAttribute("house", house);
        model.addAttribute("reservationInputForm", new ReservationInputForm());

        // ★ レビューを3件だけ（民宿詳細にチラ見せ）
        Page<Review> page = reviewService.getReviewsForHouse(id, 0, 3);
        model.addAttribute("reviews", page.getContent());

        // ★ 自分のレビュー（ログイン時のみ）
        if (login != null) {
            reviewService.getUserReviewForHouse(id, login.getUser().getId())
                         .ifPresent(r -> model.addAttribute("myReview", r));
        }

        return "houses/show";
    }
}
