package com.example.samuraitravel.controller;

import jakarta.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.samuraitravel.entity.Review;
import com.example.samuraitravel.form.ReviewForm;
import com.example.samuraitravel.security.UserDetailsImpl;
import com.example.samuraitravel.service.ReviewService;

import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
@RequestMapping("/reviews")
public class ReviewController {

    private final ReviewService reviewService;

    // 公開：民宿ごとのレビュー一覧（ページネーション）
    @GetMapping("/house/{houseId}")
    public String list(@PathVariable Integer houseId,
                       @RequestParam(defaultValue = "0") int page,
                       @RequestParam(defaultValue = "10") int size,
                       Model model) {
        Page<Review> reviews = reviewService.getReviewsForHouse(houseId, page, size);
        model.addAttribute("reviews", reviews);
        model.addAttribute("houseId", houseId);
        return "reviews/index";
    }

    // 要ログイン：新規投稿フォーム
    @GetMapping("/house/{houseId}/new")
    public String newForm(@PathVariable Integer houseId,
                          @AuthenticationPrincipal UserDetailsImpl principal,
                          Model model) {
        // 既に投稿済みなら編集へ飛ばす
        Integer userId = principal.getUser().getId();
        return reviewService.getUserReviewForHouse(houseId, userId)
                .map(r -> "redirect:/reviews/" + r.getId() + "/edit")
                .orElseGet(() -> {
                    model.addAttribute("houseId", houseId);
                    model.addAttribute("reviewForm", new ReviewForm());
                    return "reviews/new";
                });
     // 要ログイン：作成  ← パス修正！
        @PostMapping("/house/{houseId}")
        public String create(@PathVariable Integer houseId,
                             @AuthenticationPrincipal UserDetailsImpl userDetails,
                             @Validated @ModelAttribute ReviewForm form,
                             BindingResult bindingResult,
                             RedirectAttributes redirectAttributes) {
            if (bindingResult.hasErrors()) {
                return "reviews/new";
            }
            reviewService.create(houseId, userDetails.getUser().getId(), form);
            redirectAttributes.addFlashAttribute("successMessage", "レビューを投稿しました。");
            return "redirect:/houses/" + houseId;
        }

        // 要ログイン：編集フォーム（シンプルに）
        @GetMapping("/{id}/edit")
        public String edit(@PathVariable Integer id,
                           @AuthenticationPrincipal UserDetailsImpl principal,
                           Model model) {
            Review r = reviewService.getOwn(id, principal.getUser().getId());
            ReviewForm f = new ReviewForm();
            f.setRating(r.getRating());
            f.setComment(r.getComment());
            model.addAttribute("reviewId", id);
            model.addAttribute("reviewForm", f);
            return "reviews/edit";
        }

        // 要ログイン：更新
        @PostMapping("/{id}/update")
        public String update(@PathVariable Integer id,
                             @Valid @ModelAttribute ReviewForm reviewForm,
                             BindingResult br,
                             @AuthenticationPrincipal UserDetailsImpl principal,
                             Model model) {
            if (br.hasErrors()) {
                model.addAttribute("reviewId", id);
                return "reviews/edit";
            }
            Review updated = reviewService.update(id, principal.getUser().getId(), reviewForm);
            return "redirect:/reviews/house/" + updated.getHouse().getId();
        }

        // 要ログイン：削除
        @PostMapping("/{id}/delete")
        public String delete(@PathVariable Integer id,
                             @AuthenticationPrincipal UserDetailsImpl principal) {
            Integer houseId = reviewService.delete(id, principal.getUser().getId());
            return "redirect:/reviews/house/" + houseId;
        }
    }

    