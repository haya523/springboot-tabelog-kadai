package com.example.samuraitravel.service;

import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.samuraitravel.entity.House;
import com.example.samuraitravel.entity.Review;
import com.example.samuraitravel.entity.User;
import com.example.samuraitravel.form.ReviewForm;
import com.example.samuraitravel.repository.HouseRepository;
import com.example.samuraitravel.repository.ReviewRepository;
import com.example.samuraitravel.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ReviewService {

    private final ReviewRepository reviewRepository;
    private final HouseRepository houseRepository;
    private final UserRepository userRepository;

    public Page<Review> getReviewsForHouse(Integer houseId, int page, int size) {
        return reviewRepository.findByHouseIdOrderByCreatedAtDesc(houseId, PageRequest.of(page, size));
    }

    public Optional<Review> getUserReviewForHouse(Integer houseId, Integer userId) {
        return reviewRepository.findByHouseIdAndUserId(houseId, userId);
    }

    @Transactional
    public Review create(Integer houseId, Integer userId, ReviewForm form) {
        House house = houseRepository.findById(houseId).orElseThrow();
        User user = userRepository.findById(userId).orElseThrow();

        // 1ユーザー1レビュー（必要なら事前に存在チェック）
        reviewRepository.findByHouseIdAndUserId(houseId, userId).ifPresent(r -> {
            throw new IllegalStateException("すでにレビューを投稿済みです。");
        });

        Review r = new Review();
        r.setHouse(house);
        r.setUser(user);
        r.setRating(form.getRating());
        r.setComment(form.getComment());
        return reviewRepository.save(r);
    }

    @Transactional
    public Review update(Integer reviewId, Integer userId, ReviewForm form) {
        Review r = reviewRepository.findById(reviewId).orElseThrow();
        if (!r.getUser().getId().equals(userId)) {
            throw new SecurityException("自分のレビューのみ編集できます。");
        }
        r.setRating(form.getRating());
        r.setComment(form.getComment());
        return reviewRepository.save(r);
    }

    @Transactional
    public void delete(Integer reviewId, Integer userId) {
        Review r = reviewRepository.findById(reviewId).orElseThrow();
        if (!r.getUser().getId().equals(userId)) {
            throw new SecurityException("自分のレビューのみ削除できます。");
        }
        reviewRepository.delete(r);
    }
}
